!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";n.r(e);var r=function(){function t(t){void 0===t&&(t=!0),this._module={namespaced:!0,state:{},getters:{},mutations:{},actions:{},modules:{}},this.namespaced=t}return Object.defineProperty(t.prototype,"module",{get:function(){var t=this;return{namespaced:this._module.namespaced,state:function(){return t._module.state},getters:this._module.getters,mutations:this._module.mutations,actions:this._module.actions,modules:this._module.modules}},set:function(t){this._module=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"namespaced",{get:function(){return this._module.namespaced},set:function(t){this._module.namespaced=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"state",{get:function(){return this.module.state()},set:function(t){this._module.state=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"getters",{get:function(){return this.module.getters},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"mutations",{get:function(){return this.module.mutations},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"actions",{get:function(){return this.module.actions},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"modules",{get:function(){return this.module.modules},enumerable:!0,configurable:!0}),t.prototype.reset=function(){this._module={namespaced:this.namespaced,state:{},getters:{},mutations:{},actions:{},modules:{}}},t.prototype.resetState=function(){this._module.state={}},t.prototype.resetGetters=function(){this._module.getters={}},t.prototype.resetMutations=function(){this._module.mutations={}},t.prototype.resetActions=function(){this._module.actions={}},t.prototype.resetModules=function(){this._module.modules={}},t.prototype.addState=function(t,e){this.state[t]=e},t.prototype.addGetter=function(t,e){this.getters[t]=e},t.prototype.addMutation=function(t,e){this.mutations[t]=e},t.prototype.addAction=function(t,e){this.actions[t]=e},t.prototype.addModule=function(t,e){this.modules[t]=e},t.prototype.removeState=function(t){delete this.state[t]},t.prototype.removeGetter=function(t){delete this.getters[t]},t.prototype.removeMutation=function(t){delete this.mutations[t]},t.prototype.removeAction=function(t){delete this.actions[t]},t.prototype.removeModule=function(t){delete this.modules[t]},t}(),o=function(){function t(t,e){var n=this;void 0===e&&(e=void 0),this.stringGetter=function(t){return null==t[n.state_name]?n.default_value:t[n.state_name]},this.numberGetter=function(t){return null==t[n.state_name]?n.default_value:t[n.state_name]},this.booleanGetter=function(t){return null==t[n.state_name]?n.default_value:t[n.state_name]},this.arrayGetter=function(t){return null==t[n.state_name]?n.default_value:t[n.state_name]},this.objectGetter=function(t){return null==t[n.state_name]?n.default_value:t[n.state_name]},this.anyGetter=function(t){return null==t[n.state_name]?n.default_value:t[n.state_name]},this.state_name=t,this.default_value=e}return t.prototype.setDefaultValue=function(t){if(void 0===this.default_value)switch(t){case"string":this.default_value="";break;case"number":this.default_value=null;break;case"boolean":this.default_value=!1;break;case"object":this.default_value=null;break;case"array":this.default_value=[];break;default:this.default_value=null}},t.prototype.format=function(t){switch(this.setDefaultValue(t),t){case"string":return this.stringGetter;case"number":return this.numberGetter;case"boolean":return this.booleanGetter;case"array":return this.arrayGetter;case"object":return this.objectGetter;default:return this.anyGetter}},t}(),a=function(){function t(t){var e=this;this.stringMutation=function(t,n){t[e.state_name]=n||null},this.numberMutation=function(t,n){t[e.state_name]=null==n?null:n},this.booleanMutation=function(t,n){t[e.state_name]=null==n?null:!!n},this.objectMutation=function(t,n){null==n||0===Object.keys(n).length?t[e.state_name]=null:t[e.state_name]=n},this.arrayMutation=function(t,n){null==n||0===n.length?t[e.state_name]=null:t[e.state_name]=n},this.anyMutation=function(t,n){t[e.state_name]=void 0===n?null:n},this.state_name=t}return t.prototype.format=function(t){switch(t){case"string":return this.stringMutation;case"number":return this.numberMutation;case"boolean":return this.booleanMutation;case"object":return this.objectMutation;case"array":return this.arrayMutation;default:return this.anyMutation}},t}(),u=function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),o=0;for(e=0;e<n;e++)for(var a=arguments[e],u=0,i=a.length;u<i;u++,o++)r[o]=a[u];return r};function i(t){return""+t.charAt(0).toLowerCase()+t.slice(1)}function s(t){return""+t.charAt(0).toUpperCase()+t.slice(1)}function c(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];return e.length||(e=[" ","-","_","/","\\","\n","\t"]),e.forEach((function(e){t=t.split(e).map((function(t){return s(t)})).join(e)})),t}function l(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];return e.length||(e=[" ","-","_","/","\\"]),t=c.apply(void 0,u([t],e)),e.forEach((function(e){"\\"===e&&(e="\\\\");var n=new RegExp(e,"g");t=t.replace(n,"")})),t}function f(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];return i(l.apply(void 0,u([t],e)))}var m,p=function(){function t(t){this._instructions=[],this._state_name="",this._raw=t}return Object.defineProperty(t.prototype,"instructions",{get:function(){return this._instructions},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"raw",{get:function(){return this._raw},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"state_name",{get:function(){return this._state_name},set:function(t){this._state_name=t},enumerable:!0,configurable:!0}),t.prototype.process=function(){for(var t=0,e=Object.entries(this.raw);t<e.length;t++){var n=e[t],r=n[0],o=n[1];this.instructions.push(this.processInstruction(r,o)),delete this.state_name}return this.instructions},t.prototype.processInstruction=function(t,e){return{type:e.type,set_state:null==e.set_state||e.set_state,state_name:this.formatStateName(t,e),state_value:this.formatStateValue(e),set_getter:null==e.set_getter||e.set_getter,getter_name:this.formatGetterName(e),getter:this.formatGetter(e),set_mutation:null==e.set_mutation||e.set_mutation,mutation_name:this.formatMutationName(e),mutation:this.formatMutation(e.type)}},t.prototype.formatStateName=function(t,e){return e.state_name?e.state_name:this.state_name=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];return e.length||(e=[" ","-","/","\\"]),e.forEach((function(e){"\\"===e&&(e="\\\\");var n=new RegExp(e,"g");t=t.replace(n,"_")})),t.toLowerCase()}(t)},t.prototype.formatStateValue=function(t){return null==t.initial_value?null:t.initial_value},t.prototype.formatGetterName=function(t){return t.getter_name?t.getter_name:f("get_"+this.state_name)},t.prototype.formatGetter=function(t){return t.getter?t.getter:new o(this.state_name,t.default_value).format(t.type)},t.prototype.formatMutationName=function(t){return t.mutation_name?t.mutation_name:f("set_"+this.state_name)},t.prototype.formatMutation=function(t){return new a(this.state_name).format(t)},t}(),d=(m=function(t,e){return(m=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}m(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),h=function(t){function e(e){return void 0===e&&(e=!0),t.call(this,e)||this}return d(e,t),e.prototype.generate=function(t){return t.instructions&&this.executeInstructions(t.instructions),t.state&&this.addStateProperties(t.state),t.getters&&this.addGetters(t.getters),t.mutations&&this.addMutations(t.mutations),t.actions&&this.addActions(t.actions),t.modules&&this.addModules(t.modules),this.module},e.prototype.executeInstructions=function(t){var e=this;new p(t).process().forEach((function(t){t.set_state&&e.addState(t.state_name,t.state_value),t.set_getter&&e.addGetter(t.getter_name,t.getter),t.set_mutation&&e.addMutation(t.mutation_name,t.mutation)}))},e.prototype.addStateProperties=function(t){for(var e=0,n=Object.entries(t);e<n.length;e++){var r=n[e],o=r[0],a=r[1];this.addState(o,a)}},e.prototype.addGetters=function(t){for(var e=0,n=Object.entries(t);e<n.length;e++){var r=n[e],o=r[0],a=r[1];this.addGetter(o,a)}},e.prototype.addMutations=function(t){for(var e=0,n=Object.entries(t);e<n.length;e++){var r=n[e],o=r[0],a=r[1];this.addMutation(o,a)}},e.prototype.addActions=function(t){for(var e=0,n=Object.entries(t);e<n.length;e++){var r=n[e],o=r[0],a=r[1];this.addAction(o,a)}},e.prototype.addModules=function(t){for(var e=0,n=Object.entries(t);e<n.length;e++){var r=n[e],o=r[0],a=r[1];this.addModule(o,a)}},e}(r);e.default=h}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,